0:7	KEYWORD	package
0:13	IDENTIFIER	lexer
2:6	KEYWORD	import
2:8	OPERATOR/PUNCTUATION	(
3:2	LITERAL	"
3:7	IDENTIFIER	bufio
3:8	LITERAL	"
4:2	LITERAL	"
4:4	IDENTIFIER	io
4:5	LITERAL	"
5:2	LITERAL	"
5:9	IDENTIFIER	unicode
5:10	LITERAL	"
6:1	OPERATOR/PUNCTUATION	)
8:4	KEYWORD	type
8:10	IDENTIFIER	Token
8:14	IDENTIFIER	int
10:5	KEYWORD	const
10:7	OPERATOR/PUNCTUATION	(
11:4	IDENTIFIER	EOF
11:6	OPERATOR/PUNCTUATION	=
11:11	IDENTIFIER	iota
12:5	IDENTIFIER	TYPE
13:9	IDENTIFIER	OPERATOR
14:8	IDENTIFIER	KEYWORD
15:11	IDENTIFIER	IDENTIFIER
16:8	IDENTIFIER	COMMENT
17:8	IDENTIFIER	LITERAL
18:4	IDENTIFIER	NUM
19:1	OPERATOR/PUNCTUATION	)
21:3	KEYWORD	var
21:10	IDENTIFIER	tokens
21:12	OPERATOR/PUNCTUATION	=
21:15	OPERATOR/PUNCTUATION	[]
21:21	DEFAULT TYPE	string
21:22	OPERATOR/PUNCTUATION	{
22:4	IDENTIFIER	EOF
22:5	OPERATOR/PUNCTUATION	:
22:14	LITERAL	"
22:17	IDENTIFIER	EOF
22:18	LITERAL	"
22:19	OPERATOR/PUNCTUATION	,
23:5	IDENTIFIER	TYPE
23:6	OPERATOR/PUNCTUATION	:
23:14	LITERAL	"
23:21	IDENTIFIER	DEFAULT
23:26	IDENTIFIER	TYPE
23:27	LITERAL	"
23:28	OPERATOR/PUNCTUATION	,
24:9	IDENTIFIER	OPERATOR
24:10	OPERATOR/PUNCTUATION	:
24:14	LITERAL	"
24:22	IDENTIFIER	OPERATOR
24:23	OPERATOR/PUNCTUATION	
24:34	IDENTIFIER	PUNCTUATION
24:35	LITERAL	"
24:36	OPERATOR/PUNCTUATION	,
25:8	IDENTIFIER	KEYWORD
25:9	OPERATOR/PUNCTUATION	:
25:14	LITERAL	"
25:21	IDENTIFIER	KEYWORD
25:22	LITERAL	"
25:23	OPERATOR/PUNCTUATION	,
26:11	IDENTIFIER	IDENTIFIER
26:12	OPERATOR/PUNCTUATION	:
26:14	LITERAL	"
26:24	IDENTIFIER	IDENTIFIER
26:25	LITERAL	"
26:26	OPERATOR/PUNCTUATION	,
27:8	IDENTIFIER	COMMENT
27:9	OPERATOR/PUNCTUATION	:
27:14	LITERAL	"
27:21	IDENTIFIER	COMMENT
27:22	LITERAL	"
27:23	OPERATOR/PUNCTUATION	,
28:8	IDENTIFIER	LITERAL
28:9	OPERATOR/PUNCTUATION	:
28:14	LITERAL	"
28:21	IDENTIFIER	LITERAL
28:22	LITERAL	"
28:23	OPERATOR/PUNCTUATION	,
29:4	IDENTIFIER	NUM
29:5	OPERATOR/PUNCTUATION	:
29:14	LITERAL	"
29:17	IDENTIFIER	NUM
29:18	LITERAL	"
29:19	OPERATOR/PUNCTUATION	,
30:1	OPERATOR/PUNCTUATION	}
32:4	KEYWORD	func
32:6	OPERATOR/PUNCTUATION	(
32:7	IDENTIFIER	t
32:13	IDENTIFIER	Token
32:14	OPERATOR/PUNCTUATION	)
32:21	IDENTIFIER	String
32:23	OPERATOR/PUNCTUATION	()
32:30	DEFAULT TYPE	string
32:32	OPERATOR/PUNCTUATION	{
33:7	KEYWORD	return
33:14	IDENTIFIER	tokens
33:15	OPERATOR/PUNCTUATION	[
33:16	IDENTIFIER	t
33:17	OPERATOR/PUNCTUATION	]
34:1	OPERATOR/PUNCTUATION	}
36:4	KEYWORD	type
36:13	IDENTIFIER	Position
36:20	KEYWORD	struct
36:22	OPERATOR/PUNCTUATION	{
37:5	IDENTIFIER	Line
37:9	IDENTIFIER	int
38:4	IDENTIFIER	Col
38:9	IDENTIFIER	int
39:1	OPERATOR/PUNCTUATION	}
41:4	KEYWORD	type
41:10	IDENTIFIER	Lexer
41:17	KEYWORD	struct
41:19	OPERATOR/PUNCTUATION	{
42:4	IDENTIFIER	pos
42:14	IDENTIFIER	Position
43:2	IDENTIFIER	r
43:11	IDENTIFIER	bufio
43:12	OPERATOR/PUNCTUATION	.
43:18	IDENTIFIER	Reader
44:1	OPERATOR/PUNCTUATION	}
46:4	KEYWORD	func
46:13	IDENTIFIER	NewLexer
46:14	OPERATOR/PUNCTUATION	(
46:20	IDENTIFIER	reader
46:23	IDENTIFIER	io
46:24	OPERATOR/PUNCTUATION	.
46:30	IDENTIFIER	Reader
46:31	OPERATOR/PUNCTUATION	)
46:38	IDENTIFIER	Lexer
46:40	OPERATOR/PUNCTUATION	{
47:7	KEYWORD	return
47:9	OPERATOR/PUNCTUATION	&
47:14	IDENTIFIER	Lexer
47:15	OPERATOR/PUNCTUATION	{
48:5	IDENTIFIER	pos
48:6	OPERATOR/PUNCTUATION	:
48:8	OPERATOR/PUNCTUATION	&
48:16	IDENTIFIER	Position
48:17	OPERATOR/PUNCTUATION	{
48:21	IDENTIFIER	Line
48:22	OPERATOR/PUNCTUATION	:
48:24	NUM	0
48:25	OPERATOR/PUNCTUATION	,
48:29	IDENTIFIER	Col
48:30	OPERATOR/PUNCTUATION	:
48:32	NUM	0
48:34	OPERATOR/PUNCTUATION	},
49:3	IDENTIFIER	r
49:4	OPERATOR/PUNCTUATION	:
49:12	IDENTIFIER	bufio
49:13	OPERATOR/PUNCTUATION	.
49:22	IDENTIFIER	NewReader
49:23	OPERATOR/PUNCTUATION	(
49:29	IDENTIFIER	reader
49:31	OPERATOR/PUNCTUATION	),
50:2	OPERATOR/PUNCTUATION	}
51:1	OPERATOR/PUNCTUATION	}
53:4	KEYWORD	func
53:6	OPERATOR/PUNCTUATION	(
53:7	IDENTIFIER	l
53:14	IDENTIFIER	Lexer
53:15	OPERATOR/PUNCTUATION	)
53:19	IDENTIFIER	Lex
53:21	OPERATOR/PUNCTUATION	()
53:23	OPERATOR/PUNCTUATION	(
53:32	IDENTIFIER	Position
53:33	OPERATOR/PUNCTUATION	,
53:39	IDENTIFIER	Token
53:40	OPERATOR/PUNCTUATION	,
53:47	DEFAULT TYPE	string
53:48	OPERATOR/PUNCTUATION	)
53:50	OPERATOR/PUNCTUATION	{
54:4	KEYWORD	for
54:6	OPERATOR/PUNCTUATION	{
55:3	IDENTIFIER	r
55:4	OPERATOR/PUNCTUATION	,
55:6	IDENTIFIER	_
55:7	OPERATOR/PUNCTUATION	,
55:11	IDENTIFIER	err
55:14	OPERATOR/PUNCTUATION	:=
55:16	IDENTIFIER	l
55:17	OPERATOR/PUNCTUATION	.
55:18	IDENTIFIER	r
55:19	OPERATOR/PUNCTUATION	.
55:27	IDENTIFIER	ReadRune
55:29	OPERATOR/PUNCTUATION	()
56:4	KEYWORD	if
56:8	IDENTIFIER	err
56:11	OPERATOR/PUNCTUATION	!=
56:15	IDENTIFIER	nil
56:17	OPERATOR/PUNCTUATION	{
57:5	KEYWORD	if
57:9	IDENTIFIER	err
57:12	OPERATOR/PUNCTUATION	==
57:15	IDENTIFIER	io
57:16	OPERATOR/PUNCTUATION	.
57:19	IDENTIFIER	EOF
57:21	OPERATOR/PUNCTUATION	{
58:10	KEYWORD	return
58:12	IDENTIFIER	l
58:13	OPERATOR/PUNCTUATION	.
58:16	IDENTIFIER	pos
58:17	OPERATOR/PUNCTUATION	,
58:21	IDENTIFIER	EOF
58:22	OPERATOR/PUNCTUATION	,
58:25	LITERAL	""
59:4	OPERATOR/PUNCTUATION	}
60:3	OPERATOR/PUNCTUATION	}
62:3	IDENTIFIER	l
62:4	OPERATOR/PUNCTUATION	.
62:7	IDENTIFIER	pos
62:8	OPERATOR/PUNCTUATION	.
62:11	IDENTIFIER	Col
62:13	OPERATOR/PUNCTUATION	++
63:16	OPERATOR/PUNCTUATION	
64:4	KEYWORD	if
64:6	IDENTIFIER	r
64:9	OPERATOR/PUNCTUATION	==
64:13	IDENTIFIER	n
64:16	OPERATOR/PUNCTUATION	{
65:4	IDENTIFIER	l
65:5	OPERATOR/PUNCTUATION	.
65:8	IDENTIFIER	pos
65:9	OPERATOR/PUNCTUATION	.
65:12	IDENTIFIER	Col
65:14	OPERATOR/PUNCTUATION	=
65:16	NUM	0
66:4	IDENTIFIER	l
66:5	OPERATOR/PUNCTUATION	.
66:8	IDENTIFIER	pos
66:9	OPERATOR/PUNCTUATION	.
66:13	IDENTIFIER	Line
66:15	OPERATOR/PUNCTUATION	++
67:11	KEYWORD	continue
68:3	OPERATOR/PUNCTUATION	}
70:20	OPERATOR/PUNCTUATION	
71:4	KEYWORD	if
71:6	IDENTIFIER	r
71:9	OPERATOR/PUNCTUATION	==
71:12	OPERATOR/PUNCTUATION	
71:15	OPERATOR/PUNCTUATION	{
72:4	IDENTIFIER	r
72:5	OPERATOR/PUNCTUATION	,
72:7	IDENTIFIER	_
72:8	OPERATOR/PUNCTUATION	,
72:12	IDENTIFIER	err
72:15	OPERATOR/PUNCTUATION	:=
72:17	IDENTIFIER	l
72:18	OPERATOR/PUNCTUATION	.
72:19	IDENTIFIER	r
72:20	OPERATOR/PUNCTUATION	.
72:28	IDENTIFIER	ReadRune
72:30	OPERATOR/PUNCTUATION	()
73:5	KEYWORD	if
73:9	IDENTIFIER	err
73:12	OPERATOR/PUNCTUATION	!=
73:16	IDENTIFIER	nil
73:18	OPERATOR/PUNCTUATION	{
74:6	KEYWORD	if
74:10	IDENTIFIER	err
74:13	OPERATOR/PUNCTUATION	==
74:16	IDENTIFIER	io
74:17	OPERATOR/PUNCTUATION	.
74:20	IDENTIFIER	EOF
74:22	OPERATOR/PUNCTUATION	{
75:11	KEYWORD	return
75:13	IDENTIFIER	l
75:14	OPERATOR/PUNCTUATION	.
75:17	IDENTIFIER	pos
75:18	OPERATOR/PUNCTUATION	,
75:22	IDENTIFIER	EOF
75:23	OPERATOR/PUNCTUATION	,
75:26	LITERAL	""
76:5	OPERATOR/PUNCTUATION	}
77:4	OPERATOR/PUNCTUATION	}
78:4	IDENTIFIER	l
78:5	OPERATOR/PUNCTUATION	.
78:8	IDENTIFIER	pos
78:9	OPERATOR/PUNCTUATION	.
78:12	IDENTIFIER	Col
78:14	OPERATOR/PUNCTUATION	++
79:9	KEYWORD	switch
79:11	IDENTIFIER	r
79:13	OPERATOR/PUNCTUATION	{
80:7	KEYWORD	case
80:12	OPERATOR/PUNCTUATION	:
81:7	KEYWORD	for
81:9	OPERATOR/PUNCTUATION	{
82:6	IDENTIFIER	r
82:7	OPERATOR/PUNCTUATION	,
82:9	IDENTIFIER	_
82:10	OPERATOR/PUNCTUATION	,
82:14	IDENTIFIER	err
82:17	OPERATOR/PUNCTUATION	:=
82:19	IDENTIFIER	l
82:20	OPERATOR/PUNCTUATION	.
82:21	IDENTIFIER	r
82:22	OPERATOR/PUNCTUATION	.
82:30	IDENTIFIER	ReadRune
82:32	OPERATOR/PUNCTUATION	()
84:7	KEYWORD	if
84:11	IDENTIFIER	err
84:14	OPERATOR/PUNCTUATION	!=
84:18	IDENTIFIER	nil
84:20	OPERATOR/PUNCTUATION	{
85:8	KEYWORD	if
85:12	IDENTIFIER	err
85:15	OPERATOR/PUNCTUATION	==
85:18	IDENTIFIER	io
85:19	OPERATOR/PUNCTUATION	.
85:22	IDENTIFIER	EOF
85:24	OPERATOR/PUNCTUATION	{
86:13	KEYWORD	return
86:15	IDENTIFIER	l
86:16	OPERATOR/PUNCTUATION	.
86:19	IDENTIFIER	pos
86:20	OPERATOR/PUNCTUATION	,
86:24	IDENTIFIER	EOF
86:25	OPERATOR/PUNCTUATION	,
86:28	LITERAL	""
87:7	OPERATOR/PUNCTUATION	}
88:6	OPERATOR/PUNCTUATION	}
90:6	IDENTIFIER	l
90:7	OPERATOR/PUNCTUATION	.
90:10	IDENTIFIER	pos
90:11	OPERATOR/PUNCTUATION	.
90:14	IDENTIFIER	Col
90:16	OPERATOR/PUNCTUATION	++
92:7	KEYWORD	if
92:9	IDENTIFIER	r
92:12	OPERATOR/PUNCTUATION	!=
92:18	OPERATOR/PUNCTUATION	{
93:14	KEYWORD	continue
94:6	OPERATOR/PUNCTUATION	}
95:7	KEYWORD	if
95:9	IDENTIFIER	r
95:12	OPERATOR/PUNCTUATION	==
95:16	IDENTIFIER	n
95:19	OPERATOR/PUNCTUATION	{
96:7	IDENTIFIER	l
96:8	OPERATOR/PUNCTUATION	.
96:11	IDENTIFIER	pos
96:12	OPERATOR/PUNCTUATION	.
96:15	IDENTIFIER	Col
96:17	OPERATOR/PUNCTUATION	=
96:19	NUM	0
97:7	IDENTIFIER	l
97:8	OPERATOR/PUNCTUATION	.
97:11	IDENTIFIER	pos
97:12	OPERATOR/PUNCTUATION	.
97:16	IDENTIFIER	Line
97:18	OPERATOR/PUNCTUATION	++
98:6	OPERATOR/PUNCTUATION	}
100:6	IDENTIFIER	r
100:7	OPERATOR/PUNCTUATION	,
100:9	IDENTIFIER	_
100:10	OPERATOR/PUNCTUATION	,
100:14	IDENTIFIER	err
100:16	OPERATOR/PUNCTUATION	=
100:18	IDENTIFIER	l
100:19	OPERATOR/PUNCTUATION	.
100:20	IDENTIFIER	r
100:21	OPERATOR/PUNCTUATION	.
100:29	IDENTIFIER	ReadRune
100:31	OPERATOR/PUNCTUATION	()
101:7	KEYWORD	if
101:11	IDENTIFIER	err
101:14	OPERATOR/PUNCTUATION	!=
101:18	IDENTIFIER	nil
101:20	OPERATOR/PUNCTUATION	{
102:8	KEYWORD	if
102:12	IDENTIFIER	err
102:15	OPERATOR/PUNCTUATION	==
102:18	IDENTIFIER	io
102:19	OPERATOR/PUNCTUATION	.
102:22	IDENTIFIER	EOF
102:24	OPERATOR/PUNCTUATION	{
103:13	KEYWORD	return
103:15	IDENTIFIER	l
103:16	OPERATOR/PUNCTUATION	.
103:19	IDENTIFIER	pos
103:20	OPERATOR/PUNCTUATION	,
103:24	IDENTIFIER	EOF
103:25	OPERATOR/PUNCTUATION	,
103:28	LITERAL	""
104:7	OPERATOR/PUNCTUATION	}
105:6	OPERATOR/PUNCTUATION	}
106:6	IDENTIFIER	l
106:7	OPERATOR/PUNCTUATION	.
106:10	IDENTIFIER	pos
106:11	OPERATOR/PUNCTUATION	.
106:14	IDENTIFIER	Col
106:16	OPERATOR/PUNCTUATION	++
107:7	KEYWORD	if
107:9	IDENTIFIER	r
107:12	OPERATOR/PUNCTUATION	==
107:15	OPERATOR/PUNCTUATION	
107:18	OPERATOR/PUNCTUATION	{
108:11	KEYWORD	break
109:6	OPERATOR/PUNCTUATION	}
110:5	OPERATOR/PUNCTUATION	}
111:9	KEYWORD	break
112:7	KEYWORD	case
112:10	OPERATOR/PUNCTUATION	
112:12	OPERATOR/PUNCTUATION	:
113:7	KEYWORD	for
113:9	OPERATOR/PUNCTUATION	{
114:6	IDENTIFIER	r
114:7	OPERATOR/PUNCTUATION	,
114:9	IDENTIFIER	_
114:10	OPERATOR/PUNCTUATION	,
114:14	IDENTIFIER	err
114:17	OPERATOR/PUNCTUATION	:=
114:19	IDENTIFIER	l
114:20	OPERATOR/PUNCTUATION	.
114:21	IDENTIFIER	r
114:22	OPERATOR/PUNCTUATION	.
114:30	IDENTIFIER	ReadRune
114:32	OPERATOR/PUNCTUATION	()
115:7	KEYWORD	if
115:11	IDENTIFIER	err
115:14	OPERATOR/PUNCTUATION	!=
115:18	IDENTIFIER	nil
115:20	OPERATOR/PUNCTUATION	{
116:8	KEYWORD	if
116:12	IDENTIFIER	err
116:15	OPERATOR/PUNCTUATION	==
116:18	IDENTIFIER	io
116:19	OPERATOR/PUNCTUATION	.
116:22	IDENTIFIER	EOF
116:24	OPERATOR/PUNCTUATION	{
117:13	KEYWORD	return
117:15	IDENTIFIER	l
117:16	OPERATOR/PUNCTUATION	.
117:19	IDENTIFIER	pos
117:20	OPERATOR/PUNCTUATION	,
117:24	IDENTIFIER	EOF
117:25	OPERATOR/PUNCTUATION	,
117:28	LITERAL	""
118:7	OPERATOR/PUNCTUATION	}
119:6	OPERATOR/PUNCTUATION	}
120:6	IDENTIFIER	l
120:7	OPERATOR/PUNCTUATION	.
120:10	IDENTIFIER	pos
120:11	OPERATOR/PUNCTUATION	.
120:14	IDENTIFIER	Col
120:16	OPERATOR/PUNCTUATION	++
121:7	KEYWORD	if
121:9	IDENTIFIER	r
121:12	OPERATOR/PUNCTUATION	==
121:16	IDENTIFIER	n
121:19	OPERATOR/PUNCTUATION	{
122:11	KEYWORD	break
124:6	OPERATOR/PUNCTUATION	}
125:5	OPERATOR/PUNCTUATION	}
127:4	OPERATOR/PUNCTUATION	}
128:3	OPERATOR/PUNCTUATION	}
129:4	KEYWORD	if
129:12	IDENTIFIER	unicode
129:13	OPERATOR/PUNCTUATION	.
129:20	IDENTIFIER	IsSpace
129:21	OPERATOR/PUNCTUATION	(
129:22	IDENTIFIER	r
129:23	OPERATOR/PUNCTUATION	)
129:25	OPERATOR/PUNCTUATION	{
130:11	KEYWORD	continue
131:3	OPERATOR/PUNCTUATION	}
131:8	KEYWORD	else
131:11	KEYWORD	if
131:24	IDENTIFIER	isIdentifier
131:25	OPERATOR/PUNCTUATION	(
131:26	IDENTIFIER	r
131:27	OPERATOR/PUNCTUATION	)
131:29	OPERATOR/PUNCTUATION	{
132:5	IDENTIFIER	sp
132:8	OPERATOR/PUNCTUATION	:=
132:10	IDENTIFIER	l
132:11	OPERATOR/PUNCTUATION	.
132:14	IDENTIFIER	pos
133:4	IDENTIFIER	l
133:5	OPERATOR/PUNCTUATION	.
133:11	IDENTIFIER	Unread
133:13	OPERATOR/PUNCTUATION	()
134:6	IDENTIFIER	lit
134:9	OPERATOR/PUNCTUATION	:=
134:11	IDENTIFIER	l
134:12	OPERATOR/PUNCTUATION	.
134:22	IDENTIFIER	Identifier
134:24	OPERATOR/PUNCTUATION	()
135:5	KEYWORD	if
135:7	IDENTIFIER	_
135:8	OPERATOR/PUNCTUATION	,
135:11	IDENTIFIER	ok
135:14	OPERATOR/PUNCTUATION	:=
135:25	IDENTIFIER	KeywordMap
135:26	OPERATOR/PUNCTUATION	[
135:29	IDENTIFIER	lit
135:31	OPERATOR/PUNCTUATION	];
135:34	IDENTIFIER	ok
135:36	OPERATOR/PUNCTUATION	{
136:10	KEYWORD	return
136:13	IDENTIFIER	sp
136:14	OPERATOR/PUNCTUATION	,
136:22	IDENTIFIER	KEYWORD
136:23	OPERATOR/PUNCTUATION	,
136:27	IDENTIFIER	lit
137:4	OPERATOR/PUNCTUATION	}
138:5	KEYWORD	if
138:7	IDENTIFIER	_
138:8	OPERATOR/PUNCTUATION	,
138:11	IDENTIFIER	ok
138:14	OPERATOR/PUNCTUATION	:=
138:29	IDENTIFIER	DefaultTypeMap
138:30	OPERATOR/PUNCTUATION	[
138:33	IDENTIFIER	lit
138:35	OPERATOR/PUNCTUATION	];
138:38	IDENTIFIER	ok
138:40	OPERATOR/PUNCTUATION	{
139:10	KEYWORD	return
139:13	IDENTIFIER	sp
139:14	OPERATOR/PUNCTUATION	,
139:19	IDENTIFIER	TYPE
139:20	OPERATOR/PUNCTUATION	,
139:24	IDENTIFIER	lit
140:4	OPERATOR/PUNCTUATION	}
141:9	KEYWORD	return
141:12	IDENTIFIER	sp
141:13	OPERATOR/PUNCTUATION	,
141:24	IDENTIFIER	IDENTIFIER
141:25	OPERATOR/PUNCTUATION	,
141:29	IDENTIFIER	lit
142:3	OPERATOR/PUNCTUATION	}
142:8	KEYWORD	else
142:11	KEYWORD	if
142:22	IDENTIFIER	isOperator
142:23	OPERATOR/PUNCTUATION	(
142:24	IDENTIFIER	r
142:25	OPERATOR/PUNCTUATION	)
142:27	OPERATOR/PUNCTUATION	{
143:5	IDENTIFIER	sp
143:8	OPERATOR/PUNCTUATION	:=
143:10	IDENTIFIER	l
143:11	OPERATOR/PUNCTUATION	.
143:14	IDENTIFIER	pos
145:4	IDENTIFIER	l
145:5	OPERATOR/PUNCTUATION	.
145:11	IDENTIFIER	Unread
145:13	OPERATOR/PUNCTUATION	()
146:6	IDENTIFIER	lit
146:9	OPERATOR/PUNCTUATION	:=
146:11	IDENTIFIER	l
146:12	OPERATOR/PUNCTUATION	.
146:20	IDENTIFIER	Operator
146:22	OPERATOR/PUNCTUATION	()
147:9	KEYWORD	return
147:12	IDENTIFIER	sp
147:13	OPERATOR/PUNCTUATION	,
147:22	IDENTIFIER	OPERATOR
147:23	OPERATOR/PUNCTUATION	,
147:27	IDENTIFIER	lit
148:3	OPERATOR/PUNCTUATION	}
148:8	KEYWORD	else
148:11	KEYWORD	if
148:19	IDENTIFIER	unicode
148:20	OPERATOR/PUNCTUATION	.
148:27	IDENTIFIER	IsDigit
148:28	OPERATOR/PUNCTUATION	(
148:29	IDENTIFIER	r
148:30	OPERATOR/PUNCTUATION	)
148:32	OPERATOR/PUNCTUATION	{
149:5	IDENTIFIER	sp
149:8	OPERATOR/PUNCTUATION	:=
149:10	IDENTIFIER	l
149:11	OPERATOR/PUNCTUATION	.
149:14	IDENTIFIER	pos
150:4	IDENTIFIER	l
150:5	OPERATOR/PUNCTUATION	.
150:11	IDENTIFIER	Unread
150:13	OPERATOR/PUNCTUATION	()
151:6	IDENTIFIER	lit
151:9	OPERATOR/PUNCTUATION	:=
151:11	IDENTIFIER	l
151:12	OPERATOR/PUNCTUATION	.
151:18	IDENTIFIER	Number
151:20	OPERATOR/PUNCTUATION	()
152:9	KEYWORD	return
152:12	IDENTIFIER	sp
152:13	OPERATOR/PUNCTUATION	,
152:17	IDENTIFIER	NUM
152:18	OPERATOR/PUNCTUATION	,
152:22	IDENTIFIER	lit
153:3	OPERATOR/PUNCTUATION	}
153:8	KEYWORD	else
153:11	KEYWORD	if
153:13	IDENTIFIER	r
153:16	OPERATOR/PUNCTUATION	==
153:19	LITERAL	"
153:21	OPERATOR/PUNCTUATION	{
154:5	IDENTIFIER	sp
154:8	OPERATOR/PUNCTUATION	:=
154:10	IDENTIFIER	l
154:11	OPERATOR/PUNCTUATION	.
154:14	IDENTIFIER	pos
155:4	IDENTIFIER	l
155:5	OPERATOR/PUNCTUATION	.
155:11	IDENTIFIER	Unread
155:13	OPERATOR/PUNCTUATION	()
156:6	IDENTIFIER	lit
156:9	OPERATOR/PUNCTUATION	:=
156:11	IDENTIFIER	l
156:12	OPERATOR/PUNCTUATION	.
156:19	IDENTIFIER	Literal
156:21	OPERATOR/PUNCTUATION	()
157:9	KEYWORD	return
157:12	IDENTIFIER	sp
157:13	OPERATOR/PUNCTUATION	,
157:21	IDENTIFIER	LITERAL
157:22	OPERATOR/PUNCTUATION	,
157:26	IDENTIFIER	lit
158:3	OPERATOR/PUNCTUATION	}
159:15	OPERATOR/PUNCTUATION	
161:2	OPERATOR/PUNCTUATION	}
162:1	OPERATOR/PUNCTUATION	}
164:4	KEYWORD	func
164:6	OPERATOR/PUNCTUATION	(
164:7	IDENTIFIER	l
164:14	IDENTIFIER	Lexer
164:15	OPERATOR/PUNCTUATION	)
164:22	IDENTIFIER	Unread
164:24	OPERATOR/PUNCTUATION	()
164:26	OPERATOR/PUNCTUATION	{
165:3	KEYWORD	if
165:7	IDENTIFIER	err
165:10	OPERATOR/PUNCTUATION	:=
165:12	IDENTIFIER	l
165:13	OPERATOR/PUNCTUATION	.
165:14	IDENTIFIER	r
165:15	OPERATOR/PUNCTUATION	.
165:25	IDENTIFIER	UnreadRune
165:28	OPERATOR/PUNCTUATION	();
165:32	IDENTIFIER	err
165:35	OPERATOR/PUNCTUATION	!=
165:39	IDENTIFIER	nil
165:41	OPERATOR/PUNCTUATION	{
166:7	IDENTIFIER	panic
166:8	OPERATOR/PUNCTUATION	(
166:11	IDENTIFIER	err
166:12	OPERATOR/PUNCTUATION	)
167:2	OPERATOR/PUNCTUATION	}
169:2	IDENTIFIER	l
169:3	OPERATOR/PUNCTUATION	.
169:6	IDENTIFIER	pos
169:7	OPERATOR/PUNCTUATION	.
169:10	IDENTIFIER	Col
169:12	OPERATOR/PUNCTUATION	--
170:1	OPERATOR/PUNCTUATION	}
171:4	KEYWORD	func
171:6	OPERATOR/PUNCTUATION	(
171:7	IDENTIFIER	l
171:14	IDENTIFIER	Lexer
171:15	OPERATOR/PUNCTUATION	)
171:26	IDENTIFIER	Identifier
171:28	OPERATOR/PUNCTUATION	()
171:35	DEFAULT TYPE	string
171:37	OPERATOR/PUNCTUATION	{
172:4	KEYWORD	var
172:10	IDENTIFIER	ident
172:17	DEFAULT TYPE	string
173:4	KEYWORD	for
173:6	OPERATOR/PUNCTUATION	{
174:3	IDENTIFIER	r
174:4	OPERATOR/PUNCTUATION	,
174:6	IDENTIFIER	_
174:7	OPERATOR/PUNCTUATION	,
174:11	IDENTIFIER	err
174:14	OPERATOR/PUNCTUATION	:=
174:16	IDENTIFIER	l
174:17	OPERATOR/PUNCTUATION	.
174:18	IDENTIFIER	r
174:19	OPERATOR/PUNCTUATION	.
174:27	IDENTIFIER	ReadRune
174:29	OPERATOR/PUNCTUATION	()
175:4	KEYWORD	if
175:8	IDENTIFIER	err
175:11	OPERATOR/PUNCTUATION	!=
175:15	IDENTIFIER	nil
175:17	OPERATOR/PUNCTUATION	{
176:5	KEYWORD	if
176:9	IDENTIFIER	err
176:12	OPERATOR/PUNCTUATION	==
176:15	IDENTIFIER	io
176:16	OPERATOR/PUNCTUATION	.
176:19	IDENTIFIER	EOF
176:21	OPERATOR/PUNCTUATION	{
177:10	KEYWORD	return
177:16	IDENTIFIER	ident
178:4	OPERATOR/PUNCTUATION	}
179:3	OPERATOR/PUNCTUATION	}
181:3	IDENTIFIER	l
181:4	OPERATOR/PUNCTUATION	.
181:7	IDENTIFIER	pos
181:8	OPERATOR/PUNCTUATION	.
181:11	IDENTIFIER	Col
181:13	OPERATOR/PUNCTUATION	++
182:4	KEYWORD	if
182:12	IDENTIFIER	unicode
182:13	OPERATOR/PUNCTUATION	.
182:21	IDENTIFIER	IsLetter
182:22	OPERATOR/PUNCTUATION	(
182:23	IDENTIFIER	r
182:24	OPERATOR/PUNCTUATION	)
182:27	OPERATOR/PUNCTUATION	||
182:29	IDENTIFIER	r
182:32	OPERATOR/PUNCTUATION	==
182:35	IDENTIFIER	_
182:38	OPERATOR/PUNCTUATION	{
183:8	IDENTIFIER	ident
183:11	OPERATOR/PUNCTUATION	+=
183:18	DEFAULT TYPE	string
183:19	OPERATOR/PUNCTUATION	(
183:20	IDENTIFIER	r
183:21	OPERATOR/PUNCTUATION	)
184:3	OPERATOR/PUNCTUATION	}
184:8	KEYWORD	else
184:10	OPERATOR/PUNCTUATION	{
185:4	IDENTIFIER	l
185:5	OPERATOR/PUNCTUATION	.
185:11	IDENTIFIER	Unread
185:13	OPERATOR/PUNCTUATION	()
186:9	KEYWORD	return
186:15	IDENTIFIER	ident
187:3	OPERATOR/PUNCTUATION	}
188:2	OPERATOR/PUNCTUATION	}
189:1	OPERATOR/PUNCTUATION	}
191:4	KEYWORD	func
191:6	OPERATOR/PUNCTUATION	(
191:7	IDENTIFIER	l
191:14	IDENTIFIER	Lexer
191:15	OPERATOR/PUNCTUATION	)
191:23	IDENTIFIER	Literal
191:25	OPERATOR/PUNCTUATION	()
191:32	DEFAULT TYPE	string
191:33	OPERATOR/PUNCTUATION	{
192:4	KEYWORD	var
192:6	OPERATOR/PUNCTUATION	(
193:5	IDENTIFIER	lit
193:12	DEFAULT TYPE	string
194:3	IDENTIFIER	i
194:5	OPERATOR/PUNCTUATION	=
194:7	NUM	0
195:2	OPERATOR/PUNCTUATION	)
196:4	KEYWORD	for
196:6	OPERATOR/PUNCTUATION	{
197:3	IDENTIFIER	r
197:4	OPERATOR/PUNCTUATION	,
197:6	IDENTIFIER	_
197:7	OPERATOR/PUNCTUATION	,
197:11	IDENTIFIER	err
197:14	OPERATOR/PUNCTUATION	:=
197:16	IDENTIFIER	l
197:17	OPERATOR/PUNCTUATION	.
197:18	IDENTIFIER	r
197:19	OPERATOR/PUNCTUATION	.
197:27	IDENTIFIER	ReadRune
197:29	OPERATOR/PUNCTUATION	()
198:4	KEYWORD	if
198:8	IDENTIFIER	err
198:11	OPERATOR/PUNCTUATION	!=
198:15	IDENTIFIER	nil
198:17	OPERATOR/PUNCTUATION	{
199:5	KEYWORD	if
199:9	IDENTIFIER	err
199:12	OPERATOR/PUNCTUATION	==
199:15	IDENTIFIER	io
199:16	OPERATOR/PUNCTUATION	.
199:19	IDENTIFIER	EOF
199:21	OPERATOR/PUNCTUATION	{
200:10	KEYWORD	return
200:14	IDENTIFIER	lit
201:4	OPERATOR/PUNCTUATION	}
202:3	OPERATOR/PUNCTUATION	}
204:3	IDENTIFIER	l
204:4	OPERATOR/PUNCTUATION	.
204:7	IDENTIFIER	pos
204:8	OPERATOR/PUNCTUATION	.
204:11	IDENTIFIER	Col
204:13	OPERATOR/PUNCTUATION	++
205:4	KEYWORD	if
205:7	IDENTIFIER	r
205:10	OPERATOR/PUNCTUATION	==
205:13	LITERAL	"
205:16	OPERATOR/PUNCTUATION	||
205:18	IDENTIFIER	i
205:21	OPERATOR/PUNCTUATION	==
205:23	NUM	0
205:25	OPERATOR/PUNCTUATION	{
206:6	IDENTIFIER	lit
206:9	OPERATOR/PUNCTUATION	+=
206:16	DEFAULT TYPE	string
206:17	OPERATOR/PUNCTUATION	(
206:18	IDENTIFIER	r
206:19	OPERATOR/PUNCTUATION	)
207:3	OPERATOR/PUNCTUATION	}
207:8	KEYWORD	else
207:10	OPERATOR/PUNCTUATION	{
208:4	IDENTIFIER	l
208:5	OPERATOR/PUNCTUATION	.
208:11	IDENTIFIER	Unread
208:13	OPERATOR/PUNCTUATION	()
209:9	KEYWORD	return
209:13	IDENTIFIER	lit
210:3	OPERATOR/PUNCTUATION	}
211:3	IDENTIFIER	i
211:5	OPERATOR/PUNCTUATION	++
212:2	OPERATOR/PUNCTUATION	}
213:1	OPERATOR/PUNCTUATION	}
214:4	KEYWORD	func
214:6	OPERATOR/PUNCTUATION	(
214:7	IDENTIFIER	l
214:14	IDENTIFIER	Lexer
214:15	OPERATOR/PUNCTUATION	)
214:22	IDENTIFIER	Number
214:24	OPERATOR/PUNCTUATION	()
214:31	DEFAULT TYPE	string
214:33	OPERATOR/PUNCTUATION	{
215:4	KEYWORD	var
215:8	IDENTIFIER	num
215:15	DEFAULT TYPE	string
216:4	KEYWORD	for
216:6	OPERATOR/PUNCTUATION	{
217:3	IDENTIFIER	r
217:4	OPERATOR/PUNCTUATION	,
217:6	IDENTIFIER	_
217:7	OPERATOR/PUNCTUATION	,
217:11	IDENTIFIER	err
217:14	OPERATOR/PUNCTUATION	:=
217:16	IDENTIFIER	l
217:17	OPERATOR/PUNCTUATION	.
217:18	IDENTIFIER	r
217:19	OPERATOR/PUNCTUATION	.
217:27	IDENTIFIER	ReadRune
217:29	OPERATOR/PUNCTUATION	()
218:4	KEYWORD	if
218:8	IDENTIFIER	err
218:11	OPERATOR/PUNCTUATION	!=
218:15	IDENTIFIER	nil
218:17	OPERATOR/PUNCTUATION	{
219:5	KEYWORD	if
219:9	IDENTIFIER	err
219:12	OPERATOR/PUNCTUATION	==
219:15	IDENTIFIER	io
219:16	OPERATOR/PUNCTUATION	.
219:19	IDENTIFIER	EOF
219:21	OPERATOR/PUNCTUATION	{
220:10	KEYWORD	return
220:14	IDENTIFIER	num
221:4	OPERATOR/PUNCTUATION	}
222:3	OPERATOR/PUNCTUATION	}
224:3	IDENTIFIER	l
224:4	OPERATOR/PUNCTUATION	.
224:7	IDENTIFIER	pos
224:8	OPERATOR/PUNCTUATION	.
224:11	IDENTIFIER	Col
224:13	OPERATOR/PUNCTUATION	++
225:4	KEYWORD	if
225:12	IDENTIFIER	unicode
225:13	OPERATOR/PUNCTUATION	.
225:20	IDENTIFIER	IsDigit
225:21	OPERATOR/PUNCTUATION	(
225:22	IDENTIFIER	r
225:23	OPERATOR/PUNCTUATION	)
225:26	OPERATOR/PUNCTUATION	||
225:28	IDENTIFIER	r
225:31	OPERATOR/PUNCTUATION	==
225:34	OPERATOR/PUNCTUATION	.
225:37	OPERATOR/PUNCTUATION	{
226:6	IDENTIFIER	num
226:9	OPERATOR/PUNCTUATION	+=
226:16	DEFAULT TYPE	string
226:17	OPERATOR/PUNCTUATION	(
226:18	IDENTIFIER	r
226:19	OPERATOR/PUNCTUATION	)
227:3	OPERATOR/PUNCTUATION	}
227:8	KEYWORD	else
227:10	OPERATOR/PUNCTUATION	{
228:4	IDENTIFIER	l
228:5	OPERATOR/PUNCTUATION	.
228:11	IDENTIFIER	Unread
228:13	OPERATOR/PUNCTUATION	()
229:9	KEYWORD	return
229:13	IDENTIFIER	num
230:3	OPERATOR/PUNCTUATION	}
231:2	OPERATOR/PUNCTUATION	}
232:1	OPERATOR/PUNCTUATION	}
234:4	KEYWORD	func
234:6	OPERATOR/PUNCTUATION	(
234:7	IDENTIFIER	l
234:14	IDENTIFIER	Lexer
234:15	OPERATOR/PUNCTUATION	)
234:24	IDENTIFIER	Operator
234:26	OPERATOR/PUNCTUATION	()
234:33	DEFAULT TYPE	string
234:35	OPERATOR/PUNCTUATION	{
235:4	KEYWORD	var
235:7	IDENTIFIER	op
235:14	DEFAULT TYPE	string
236:4	KEYWORD	for
236:6	OPERATOR/PUNCTUATION	{
237:3	IDENTIFIER	r
237:4	OPERATOR/PUNCTUATION	,
237:6	IDENTIFIER	_
237:7	OPERATOR/PUNCTUATION	,
237:11	IDENTIFIER	err
237:14	OPERATOR/PUNCTUATION	:=
237:16	IDENTIFIER	l
237:17	OPERATOR/PUNCTUATION	.
237:18	IDENTIFIER	r
237:19	OPERATOR/PUNCTUATION	.
237:27	IDENTIFIER	ReadRune
237:29	OPERATOR/PUNCTUATION	()
238:4	KEYWORD	if
238:8	IDENTIFIER	err
238:11	OPERATOR/PUNCTUATION	!=
238:15	IDENTIFIER	nil
238:17	OPERATOR/PUNCTUATION	{
239:5	KEYWORD	if
239:9	IDENTIFIER	err
239:12	OPERATOR/PUNCTUATION	==
239:15	IDENTIFIER	io
239:16	OPERATOR/PUNCTUATION	.
239:19	IDENTIFIER	EOF
239:21	OPERATOR/PUNCTUATION	{
240:10	KEYWORD	return
240:13	IDENTIFIER	op
241:4	OPERATOR/PUNCTUATION	}
242:3	OPERATOR/PUNCTUATION	}
244:3	IDENTIFIER	l
244:4	OPERATOR/PUNCTUATION	.
244:7	IDENTIFIER	pos
244:8	OPERATOR/PUNCTUATION	.
244:11	IDENTIFIER	Col
244:13	OPERATOR/PUNCTUATION	++
245:31	OPERATOR/PUNCTUATION	
246:28	OPERATOR/PUNCTUATION	
247:28	OPERATOR/PUNCTUATION	
248:18	OPERATOR/PUNCTUATION	
249:27	OPERATOR/PUNCTUATION	
250:4	KEYWORD	if
250:6	IDENTIFIER	r
250:9	OPERATOR/PUNCTUATION	==
250:13	IDENTIFIER	n
250:16	OPERATOR/PUNCTUATION	{
251:4	IDENTIFIER	l
251:5	OPERATOR/PUNCTUATION	.
251:11	IDENTIFIER	Unread
251:13	OPERATOR/PUNCTUATION	()
252:9	KEYWORD	return
252:12	IDENTIFIER	op
253:3	OPERATOR/PUNCTUATION	}
254:4	KEYWORD	if
254:6	IDENTIFIER	_
254:7	OPERATOR/PUNCTUATION	,
254:10	IDENTIFIER	ok
254:13	OPERATOR/PUNCTUATION	:=
254:19	IDENTIFIER	OpMap
254:20	OPERATOR/PUNCTUATION	[
254:21	IDENTIFIER	r
254:23	OPERATOR/PUNCTUATION	];
254:26	IDENTIFIER	ok
254:28	OPERATOR/PUNCTUATION	{
255:5	IDENTIFIER	op
255:8	OPERATOR/PUNCTUATION	+=
255:15	DEFAULT TYPE	string
255:16	OPERATOR/PUNCTUATION	(
255:17	IDENTIFIER	r
255:18	OPERATOR/PUNCTUATION	)
256:3	OPERATOR/PUNCTUATION	}
256:8	KEYWORD	else
256:10	OPERATOR/PUNCTUATION	{
257:4	IDENTIFIER	l
257:5	OPERATOR/PUNCTUATION	.
257:11	IDENTIFIER	Unread
257:13	OPERATOR/PUNCTUATION	()
258:9	KEYWORD	return
258:12	IDENTIFIER	op
259:3	OPERATOR/PUNCTUATION	}
260:2	OPERATOR/PUNCTUATION	}
262:1	OPERATOR/PUNCTUATION	}
